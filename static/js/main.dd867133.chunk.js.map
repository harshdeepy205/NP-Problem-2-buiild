{"version":3,"sources":["classes/expense.js","utils/splitwise.js","Component/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Expense","p1","p2","val","this","person1","person2","amount","upheapify","heap","idx","pi","Math","floor","first","temp","downheapify","lc","rc","length","largest","push_heap","key","o","push","heap_top","pop_heap","i","pop","Home","useState","name","setName","allNames","setAllNames","flag","setFlag","finalValues","setFinalValues","items","setItems","outputList","setOutputList","inputGraphData","setInputGraphData","inputGraphConfig","setInputGraphConfig","outputGraphData","setOutputGraphData","handleFinalChange","event","target","value","generateNodes","map","item","id","generateLinks","source","generateOutputLinks","className","TextField","label","variant","disabled","onChange","Button","color","onClick","preventDefault","previous","index","style","Grid","container","xs","textAlign","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","scope","FormControl","InputLabel","Select","MenuItem","type","placeholder","InputLabelProps","shrink","size","e","alert","console","log","data","nodes","links","freezeAllDragEvents","nodeHighlightBehavior","node","highlightStrokeColor","fontSize","link","highlightColor","renderLabel","labelProperty","directed","height","width","input","parseInt","output","transactions","net_balance","positive","negative","p","result","exp","second","min","splitwise","Object","keys","config","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd867133.chunk.js","sourcesContent":["export default class Expense {\n  constructor(p1, p2, val) {\n    this.person1 = p1;\n    this.person2 = p2;\n    this.amount = val;\n  }\n}","import Expense from \"../classes/expense\";\n\nfunction upheapify(heap, idx) {\n  if (idx == 0) return;\n  var pi = Math.floor((idx - 1) / 2);\n  //console.log(pi, idx);\n  if (heap[pi].first < heap[idx].first) {\n    var temp = heap[pi];\n    heap[pi] = heap[idx];\n    heap[idx] = temp;\n    upheapify(heap, pi);\n  } else {\n    return;\n  }\n}\n\nfunction downheapify(heap, idx) {\n  var lc = 2 * idx + 1;\n  var rc = 2 * idx + 2;\n  if (lc >= heap.length && rc >= heap.length) return;\n  var largest = idx;\n  if (lc < heap.length && heap[lc].first > heap[largest].first) {\n    largest = lc;\n  }\n  if (rc < heap.length && heap[rc].first > heap[largest].first) {\n    largest = rc;\n  }\n  if (largest == idx) return;\n  var temp = heap[largest];\n  heap[largest] = heap[idx];\n  heap[idx] = temp;\n  downheapify(heap, largest);\n}\n\nfunction push_heap(heap, key, val) {\n  var o = { \"first\": key, \"second\": val };\n  heap.push(o);\n  //console.log(heap);\n  upheapify(heap, heap.length - 1);\n}\n\nfunction heap_top(heap) {\n  if (heap.length == 0) return {};\n  return heap[0];\n}\n\nfunction pop_heap(heap) {\n  var i = heap.length - 1;\n  var temp = heap[0]\n  heap[0] = heap[i]\n  heap[i] = temp;\n  heap.pop();\n  downheapify(heap, 0);\n}\n\nexport function splitwise(transactions) {\n  var net_balance = {};\n  //console.log(transactions);\n  for (var i = 0; i < transactions.length; i++) {\n    var e = transactions[i];\n    if (e.person1 in net_balance)\n      net_balance[e.person1] += e.amount;\n    else\n      net_balance[e.person1] = e.amount;\n    if (e.person2 in net_balance)\n      net_balance[e.person2] -= e.amount;\n    else\n      net_balance[e.person2] = 0 - e.amount;\n\n  }\n  //console.log(net_balance);\n  var positive = [];\n  var negative = [];\n  for (const p in net_balance) {\n    //console.log(p);\n    if (net_balance[p] > 0) {\n      push_heap(positive, net_balance[p], p);\n    } else if (net_balance[p] < 0) {\n      push_heap(negative, -1 * net_balance[p], p);\n    }\n  }\n  //console.log(\"hi\", positive, negative);\n  var result = [];\n\n  while (positive.length > 0) {\n    var p1 = heap_top(positive);\n    var p2 = heap_top(negative);\n    pop_heap(positive);\n    pop_heap(negative);\n    let exp = new Expense(p2.second, p1.second, Math.min(p1.first, p2.first));\n    result.push(exp);\n    if (p1.first > p2.first) {\n      push_heap(positive, p1.first - p2.first, p1.second);\n    } else if (p1.first < p2.first) {\n      push_heap(negative, p2.first - p1.first, p2.second);\n    }\n  }\n  //console.log(result);\n  return result;\n}\n","import React, { useState, } from 'react'\nimport {\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TableCell,\n  TableContainer,\n  Paper,\n  Table,\n  TableHead,\n  TableRow,\n  TableBody,\n  Grid,\n} from '@material-ui/core'\nimport { Graph } from 'react-d3-graph'\nimport Expense from '../classes/expense'\nimport { splitwise } from '../utils/splitwise'\n\nconst Home = () => {\n  const [name, setName] = useState('')\n  const [allNames, setAllNames] = useState([])\n  const [flag, setFlag] = useState(false)\n  const [finalValues, setFinalValues] = useState({\n    \"person1\": \"\",\n    \"person2\": \"\",\n    \"amount\": \"\"\n  })\n  const [items, setItems] = useState([])\n  const [outputList, setOutputList] = useState([])\n\n  const { person1, person2, amount } = finalValues;\n\n  const [inputGraphData, setInputGraphData] = useState({})\n  const [inputGraphConfig, setInputGraphConfig] = useState({})\n\n  const [outputGraphData, setOutputGraphData] = useState({})\n\n  const handleFinalChange = name => event => {\n    setFinalValues({ ...finalValues, [name]: event.target.value })\n  }\n\n\n  const handleChange = (event) => {\n    setName(event.target.value)\n  }\n\n  const addParticipant = event => {\n    event.preventDefault();\n    setAllNames(previous => [{ name }, ...previous])\n    setName('')\n  }\n\n  const listOfNames = () => {\n    return (\n      <div className=\"allnames\">\n        <h3>Names</h3>\n\n        {allNames.map((item, index) => (\n          <h4 style={{ color: \"#3f3f3f\" }} key={index}> { item.name}</h4>\n        ))\n        }\n      </div>\n    )\n  }\n\n  const handleOpenForm = () => {\n    setFlag(!false)\n  }\n\n  const myForm = () => {\n    function addValues() {\n      if ((finalValues['person1'] !== \"\") && (finalValues['person2'] !== \"\") && (finalValues['amount'] !== \"\")) {\n        setItems([...items, finalValues])\n      } else {\n        alert(\"Enter all Fields\")\n      }\n      setFinalValues({\n        ...finalValues,\n        \"person1\": \"\",\n        \"person2\": \"\",\n        \"amount\": \"\"\n      })\n    }\n    return (\n      <TableContainer component={Paper} className=\"table\">\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Payer</TableCell>\n              <TableCell align=\"center\">Payee</TableCell>\n              <TableCell align=\"center\">Amount</TableCell>\n              <TableCell align=\"center\">Add</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {items.length > 0 && items.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell component=\"th\" align=\"center\" scope=\"row\">\n                  {row.person1}\n                </TableCell>\n                <TableCell align=\"center\">{row.person2}</TableCell>\n                <TableCell align=\"center\">{row.amount}</TableCell>\n              </TableRow>\n            ))}\n            <TableRow>\n              <TableCell align=\"center\">\n                <FormControl>\n                  <InputLabel>Payer</InputLabel>\n                  <Select value={person1} onChange={handleFinalChange(\"person1\")}>\n                    {allNames.map(item => (\n                      <MenuItem value={item.name} >{item.name}</MenuItem>\n                    ))\n                    }\n                  </Select>\n                </FormControl>\n              </TableCell>\n\n\n              <TableCell align=\"center\">\n                <FormControl>\n                  <InputLabel>Payee</InputLabel>\n                  <Select value={person2} onChange={handleFinalChange(\"person2\")}>\n                    {allNames.map(item =>\n                    ((person1 !== item.name) ? <MenuItem value={item.name}>{item.name}</MenuItem> : <></>\n                    ))\n                    }\n                  </Select>\n                </FormControl>\n              </TableCell>\n\n\n              <TableCell align=\"center\">\n                <FormControl>\n                  <TextField\n                    id=\"standard-number\"\n                    label=\"Amount\"\n                    type=\"number\"\n                    value={amount}\n                    placeholder=\"Emter Amount\"\n                    onChange={handleFinalChange(\"amount\")}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  />\n                </FormControl>\n              </TableCell>\n\n\n              <TableCell align=\"center\">\n                <Button\n                  size=\"small\"\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={(e) => { addValues() }}\n                >\n                  + ADD\n                </Button>\n\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n\n  const handleTransactionDataSubmit = () => {\n    console.log(\"Participants: \", allNames, \" transactions: \", items)\n    const data = {\n      nodes: generateNodes(),\n      links: generateLinks(),\n    }\n    const config = {\n      freezeAllDragEvents: true,\n      nodeHighlightBehavior: true,\n      node: {\n        color: \"lightgreen\",\n        highlightStrokeColor: \"blue\",\n        fontSize: 12,\n      },\n      link: {\n        highlightColor: \"lightblue\",\n        renderLabel: true,\n        labelProperty: \"amount\",\n        fontSize: 12,\n      },\n      directed: true,\n      height: 600,\n      width: 600,\n    };\n\n    setInputGraphData(data)\n    setInputGraphConfig(config)\n  }\n\n  const generateNodes = () => allNames.map(item => ({ id: item.name }))\n\n  const generateLinks = () => items.map(({ person1, person2, amount }) => ({ source: person1, target: person2, amount }))\n\n  const generateOutputLinks = (items) => items.map(({ person1, person2, amount }) => ({ source: person1, target: person2, amount }))\n\n  const splitwiseTransactions = () => {\n    const input = []\n    for (let item of items) {\n      input.push(new Expense(item.person1, item.person2, parseInt(item.amount)))\n    }\n    const output = splitwise(input)\n    console.log('output: ', output)\n    setOutputList(output)\n    setOutputGraphData({ nodes: generateNodes(), links: generateOutputLinks(output) })\n  }\n\n  return (\n    <div>\n      <div className=\"name-component\">\n        <div className=\"p-name\">\n          <h2>Enter names of People in the group</h2>\n          <div className=\"p-name-field\">\n            <TextField id=\"outlined-basic\" label=\"Name\"\n              variant=\"outlined\"\n              value={name}\n              disabled={flag}\n              onChange={handleChange} />\n          </div>\n          <Button variant=\"contained\"\n            color=\"primary\"\n            onClick={addParticipant}\n          >\n            Add\n                </Button>\n        </div>\n        {allNames && allNames.length ? (\n          <>\n            <div className=\"list-div\">\n              <div className=\"list-all-names\">\n                {listOfNames()}\n              </div>\n            </div>\n            <Button variant=\"contained\" color=\"secondary\" onClick={handleOpenForm}>Submit</Button>\n          </>\n        ) : null}\n\n      </div>\n\n      {flag ? (\n        <>\n          <Grid container>\n            <Grid item xs={6}>\n              <div>\n                <div>\n                  <h4>Transactions</h4>\n                  <div style={{ textAlign: \"left\" }}>\n                    <p>Enter transactions in the table below :-</p>\n                    <ol>\n                      <li>Enter the names of the Payer in first column</li>\n                      <li>Enter the names of the Payee in second column</li>\n                      <li>Enter the amount paid in the third column</li>\n                      <li>Click on Build Graph to build a graph from the given transactions</li>\n                      <li>Click on Simplify payments button when you are done with entering the payments.</li>\n                    </ol>\n                  </div>\n                </div>\n              </div>\n              <div className=\"form\">\n                {flag && myForm()}\n              </div>\n\n              {items && items.length ? (\n                <div className=\"form-names\">\n                  <Button variant=\"contained\" color=\"primary\" onClick={handleTransactionDataSubmit}>Build Graph</Button>\n                  <Button variant=\"contained\" color=\"secondary\" onClick={splitwiseTransactions}>Simplify Settlements</Button>\n                </div>\n              ) : null}\n            </Grid>\n\n            <Grid item xs={6}>\n              {Object.keys(inputGraphData).length && Object.keys(inputGraphConfig).length ? (\n                <>\n                  <h5>Generated graph from the transactions entered</h5>\n                  <Graph\n                    id=\"graph-id\" // id is mandatory\n                    data={inputGraphData}\n                    config={inputGraphConfig}\n                  />\n                </>\n              ) : null}\n            </Grid>\n          </Grid>\n\n          <Grid container>\n            <Grid item xs={6}>\n              {\n                outputList && outputList.length ? (\n                  <>\n                    <h3> Simplified Settlement</h3>\n                    <TableContainer component={Paper} className=\"table\">\n                      <Table aria-label=\"simple table\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell align=\"center\">Payer</TableCell>\n                            <TableCell align=\"center\">Payee</TableCell>\n                            <TableCell align=\"center\">Amount</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {outputList.length && outputList.map((row) => (\n                            <TableRow key={row.name}>\n                              <TableCell component=\"th\" align=\"center\" scope=\"row\">\n                                {row.person1}\n                              </TableCell>\n                              <TableCell align=\"center\">{row.person2}</TableCell>\n                              <TableCell align=\"center\">{row.amount}</TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </>\n                ) : null\n              }\n            </Grid>\n            <Grid item xs={6}>\n              {\n                Object.keys(outputGraphData).length && Object.keys(inputGraphConfig).length ? (\n                  <>\n                    <h5>Graph generated from the solution of algorithm</h5>\n                    <Graph\n                      id=\"graph-id-output\" // id is mandatory\n                      data={outputGraphData}\n                      config={inputGraphConfig}\n                    />\n                  </>\n                ) : null\n              }\n            </Grid>\n          </Grid>\n        </>\n      ) : null}\n    </div>\n  )\n}\n\nexport default Home","import React from 'react'\nimport './App.css';\nimport Home from './Component/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n      {/* <Demo /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}